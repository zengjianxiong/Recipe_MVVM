if (!isNeedModuleDetail.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    compileSdkVersion build_versions.target_sdk
    buildToolsVersion build_versions.build_tools



    defaultConfig {
        if (!isNeedModuleDetail.toBoolean()) {
            applicationId "com.recipe_mvvm.zfl.module_recipe_detail"
        }
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName build_versions.verion_name
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    sourceSets {
        main {
            if (isNeedModuleDetail.toBoolean()) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
                //集成开发模式下排除debug文件夹中的所有Java文件
                java {
                    exclude 'debug/**'
                }
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':lib_base')

    implementation project(':lib_res')

    //编译时运行处理声明
//    annotationProcessor deps.apollo.compiler
    annotationProcessor deps.arouter.compiler
    //apollo now we use apollo from local
    implementation project(path:':apollo_core')
    annotationProcessor project(path:':apollo_processor')
}
